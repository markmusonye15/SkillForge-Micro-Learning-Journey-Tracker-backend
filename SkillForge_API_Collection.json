{
	"info": {
		"_postman_id": "d5e6f7a8-1234-5678-9abc-def012345678",
		"name": "SkillForge API (Master Collection)",
		"description": "A complete collection for testing the entire SkillForge API, including authentication, journeys, and steps.",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "1. Authentication",
			"description": "Handles user creation, login, and logout.",
			"item": [
				{
					"name": "Register New User (with Email)",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\": \"test_user_postman\",\n    \"password\": \"password123\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/auth/register",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"auth",
								"register"
							]
						},
						"description": "Creates a new user account."
					},
					"response": []
				},
				{
					"name": "Login User (to get token)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 200) {",
									"    pm.collectionVariables.set(\"jwt_token\", pm.response.json().access_token);",
									"    console.log(\"JWT Token saved successfully!\");",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\": \"test_user_postman\",\n    \"password\": \"password123\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/auth/login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"auth",
								"login"
							]
						},
						"description": "Logs in a user and automatically saves the JWT access token to a collection variable."
					},
					"response": []
				}
			]
		},
		{
			"name": "2. Journeys (CRUD)",
			"description": "All operations for learning journeys. Requires authentication.",
			"item": [
				{
					"name": "Create Journey",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"title\": \"Learn FastAPI\",\n    \"description\": \"A complete journey for mastering the FastAPI framework.\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/journeys/",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"journeys",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Journeys",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/journeys/",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"journeys",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Journey by ID",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/journeys/1",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"journeys",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Journey",
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"title\": \"Mastering FastAPI and Pydantic\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/journeys/1",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"journeys",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Journey",
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/journeys/1",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"journeys",
								"1"
							]
						}
					},
					"response": []
				}
			],
			"auth": {
				"type": "bearer",
				"bearer": [
					{
						"key": "token",
						"value": "{{jwt_token}}",
						"type": "string"
					}
				]
			}
		},
		{
			"name": "3. Steps (CRUD)",
			"description": "All operations for steps. Requires authentication.",
			"item": [
				{
					"name": "Add Step to Journey",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"title\": \"Read the official documentation\",\n    \"description\": \"Focus on path operations and dependency injection.\",\n    \"journey_id\": 1\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/steps/",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"steps",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Step",
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"title\": \"Read the official documentation (and build a small app)\",\n    \"is_complete\": true\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/steps/1",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"steps",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Step",
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/steps/1",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"steps",
								"1"
							]
						}
					},
					"response": []
				}
			],
			"auth": {
				"type": "bearer",
				"bearer": [
					{
						"key": "token",
						"value": "{{jwt_token}}",
						"type": "string"
					}
				]
			}
		},
		{
			"name": "4. Logout",
			"description": "Logs the user out and invalidates their token.",
			"item": [
				{
					"name": "Logout User",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/auth/logout",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"auth",
								"logout"
							]
						},
						"description": "Logs out the user by adding their current token to the blocklist."
					},
					"response": []
				}
			]
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "http://127.0.0.1:5000",
			"type": "string"
		},
		{
			"key": "jwt_token",
			"value": "",
			"type": "string"
		}
	]
}